subprojects {
	apply plugin: 'java'
	apply plugin: 'scala'
	apply plugin: 'maven'
	apply plugin: 'eclipse'
	
	ext.nextRelease = '2.2.0';
	ext.warspiteCommonVersion = '1.5.11'
	ext.scalaVersion = '2.9.2';
	ext.slf4jVersion = '1.6.1';
	
	group = "com.warspite.insulae"
	
	if (project.hasProperty("release")) {
		version = ext.nextRelease
	} 
	else {
		version = ext.nextRelease + '-SNAPSHOT'
	}
	    
	repositories {
	    mavenCentral()
	    mavenLocal()
	}
	
	dependencies {
    	scalaTools 'org.scala-lang:scala-compiler:' + ext.scalaVersion
    	scalaTools 'org.scala-lang:scala-library:' + ext.scalaVersion

    	compile 'org.scala-lang:scala-library:' + ext.scalaVersion
		compile 'org.slf4j:slf4j-api:' + ext.slf4jVersion
		
		testCompile 'junit:junit:4.9'
		testCompile 'org.mockito:mockito-core:1.8.5'
		testCompile 'org.slf4j:slf4j-nop:' + ext.slf4jVersion
		testCompile 'org.scalatest:scalatest_' + ext.scalaVersion + ':1.8'
	}
	
	eclipse { 
		classpath { 
			containers "org.scala-ide.sdt.launching.SCALA_CONTAINER" 
			file { 
				whenMerged { classpath -> 
					def javaRuntime = classpath.entries.find { it instanceof org.gradle.plugins.ide.eclipse.model.Container && it.path.contains('JRE_CONTAINER') } 
					def scalaRuntime = classpath.entries.find { it instanceof org.gradle.plugins.ide.eclipse.model.Container && it.path.contains('SCALA_CONTAINER') } 
					def scalaLib = classpath.entries.findAll { it.toString().contains("scala-library") } 
           
					// Avoid problems with the Scala IDE 
					classpath.entries.removeAll(scalaLib) 
          
					// Change container order to support running unit tests 
					if(javaRuntime != null && scalaRuntime != null) { 
						classpath.entries.remove(javaRuntime) 
						classpath.entries.remove(scalaRuntime) 
						classpath.entries.add(scalaRuntime) 
						classpath.entries.add(javaRuntime) 
					} 
				} 
			} 
		} 
	}
	
	test{
    	outputs.upToDateWhen { false }
	}
}
