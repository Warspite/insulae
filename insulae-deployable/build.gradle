import org.apache.tools.ant.filters.*

dependencies {
	compile 'com.warspite.common:cli:' + ext.warspiteCommonVersion
	compile 'com.warspite.common:servlets:' + ext.warspiteCommonVersion
	compile project(':insulae-servlets')
	compile project(':insulae-database:insulae-database-interface')
	compile project(':insulae-database:insulae-database-mysql')
	compile project(':insulae-database:insulae-database-dummy')

	runtime 'org.slf4j:slf4j-log4j12:' + ext.slf4jVersion
	
	compile 'com.warspite.insulae:insulae-web:0.2.22@war'
	compile 'com.warspite.insulae:insulae-sandbox-web:0.1.9@war'
}

task zip(type: Zip, dependsOn: [jar]) {
	outputs.upToDateWhen { false }
	doFirst {
		delete project.buildDir.path + '/distributions'
		
		def schemaVersion = 0
		configurations.runtime.each{File dep ->
			zipTree(dep).matching { include 'scripts/db/**/*-up.sql' }.each {
				def thisVersion = it.name.split('-')[0].toInteger()
				if(thisVersion > schemaVersion)
					schemaVersion = thisVersion
			}
		}

		configurations.runtime.each{File dep ->
			FileTree zip = zipTree(dep).matching { include 'scripts/**', 'configuration/**' }

			copy {
				from zip
				into project.buildDir.path + '/resources/main'
				filter(ReplaceTokens, tokens: [schema_version: schemaVersion.toString()])
			}
		}
	}
	
	from 'build/resources/main'
	
	into('libs') {
		from configurations.runtime
		from 'build/libs'
	}

	into('wars') {
		from configurations.runtime.filter { it.name.contains '.war' }
	}
}

install.dependsOn(zip)

artifacts {
	archives zip
}
